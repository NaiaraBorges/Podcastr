{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Naiara Borges\\\\Documents\\\\C\\xF3digos\\\\podcastrnext\\\\src\\\\contexts\\\\PlayerContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useState, useContext } from 'react';\nexport var PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      episodeList = _useState[0],\n      setEpisodeList = _useState[1];\n\n  var _useState2 = useState(0),\n      currentEpisodeIndex = _useState2[0],\n      setCurrentEpisodeIndex = _useState2[1];\n\n  var _useState3 = useState(false),\n      isPlaying = _useState3[0],\n      setIsPlaying = _useState3[1];\n\n  var _useState4 = useState(false),\n      isLooping = _useState4[0],\n      setIsLooping = _useState4[1];\n\n  var _useState5 = useState(false),\n      isShuffling = _useState5[0],\n      setIsShuffling = _useState5[1];\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function toggleShuffle() {\n    setIsShuffling(!isShuffling);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  function clearPlayerState() {\n    setEpisodeList([]);\n    setCurrentEpisodeIndex(0);\n  }\n\n  var hasPrevious = currentEpisodeIndex > 0;\n  var hasNext = isShuffling || currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    if (isShuffling) {\n      var nextRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length);\n      setCurrentEpisodeIndex(nextRandomEpisodeIndex);\n    } else if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList: episodeList,\n      currentEpisodeIndex: currentEpisodeIndex,\n      play: play,\n      playList: playList,\n      isPlaying: isPlaying,\n      isLooping: isLooping,\n      isShuffling: isShuffling,\n      playNext: playNext,\n      playPrevious: playPrevious,\n      togglePlay: togglePlay,\n      setPlayingState: setPlayingState,\n      hasNext: hasNext,\n      hasPrevious: hasPrevious,\n      toggleLoop: toggleLoop,\n      toggleShuffle: toggleShuffle,\n      clearPlayerState: clearPlayerState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PlayerContextProvider, \"YSXWY8OfLfVxd5To+FHcHi+GAY0=\");\n\n_c = PlayerContextProvider;\nexport var usePlayer = function usePlayer() {\n  _s2();\n\n  return useContext(PlayerContext);\n};\n\n_s2(usePlayer, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"sources":["C:/Users/Naiara Borges/Documents/CÃ³digos/podcastrnext/src/contexts/PlayerContext.tsx"],"names":["createContext","useState","useContext","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","isShuffling","setIsShuffling","play","episode","playList","list","index","togglePlay","toggleLoop","toggleShuffle","setPlayingState","state","clearPlayerState","hasPrevious","hasNext","length","playNext","nextRandomEpisodeIndex","Math","floor","random","playPrevious","usePlayer"],"mappings":"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","sourcesContent":["import { createContext, useState, ReactNode, useContext } from 'react';\r\n\r\ntype Episode = {\r\n    title: string;\r\n    members: string;\r\n    thumbnail: string;\r\n    duration: number;\r\n    url: string;\r\n};\r\n\r\ntype PlayerContextData = {\r\n    episodeList: Episode[];\r\n    currentEpisodeIndex: number;\r\n    isPlaying: boolean;\r\n    isLooping: boolean;\r\n    isShuffling: boolean;\r\n    play: (episode: Episode) => void;\r\n    playList: (list: Episode[], index: number) => void;\r\n    setPlayingState: (state: boolean) => void;\r\n    togglePlay: () => void;\r\n    toggleLoop: () => void;\r\n    toggleShuffle: () => void;\r\n    playNext: () => void;\r\n    playPrevious: () => void;\r\n    clearPlayerState: () => void;\r\n    hasNext: boolean;\r\n    hasPrevious: boolean;\r\n\r\n};\r\n\r\nexport const PlayerContext = createContext({} as PlayerContextData);\r\n\r\ntype PlayerContextProviderProps = {\r\n    children: ReactNode;\r\n}\r\n\r\nexport function PlayerContextProvider( {children}: PlayerContextProviderProps ) {\r\n  const [episodeList, setEpisodeList] = useState([]);\r\n  const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [isLooping, setIsLooping] = useState(false);\r\n  const [isShuffling, setIsShuffling] = useState(false);\r\n\r\n  function play(episode: Episode) {\r\n    setEpisodeList([episode])\r\n    setCurrentEpisodeIndex(0);\r\n    setIsPlaying(true);\r\n  }\r\n\r\n  function playList(list: Episode[], index: number) {\r\n    setEpisodeList(list);\r\n    setCurrentEpisodeIndex(index);\r\n    setIsPlaying(true);\r\n  }\r\n\r\n  function togglePlay() {\r\n    setIsPlaying(!isPlaying);\r\n  }\r\n\r\n  function toggleLoop() {\r\n    setIsLooping(!isLooping);\r\n  }\r\n\r\n  function toggleShuffle() {\r\n    setIsShuffling(!isShuffling);\r\n  }\r\n\r\n  function setPlayingState(state: boolean) {\r\n    setIsPlaying(state);\r\n  }\r\n\r\n  function clearPlayerState() {\r\n    setEpisodeList([]);\r\n    setCurrentEpisodeIndex(0);\r\n  }\r\n\r\n  const hasPrevious = currentEpisodeIndex > 0;\r\n  const hasNext = isShuffling || (currentEpisodeIndex + 1) < episodeList.length\r\n\r\n  function playNext() {\r\n    if(isShuffling) {\r\n      const nextRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length)\r\n\r\n      setCurrentEpisodeIndex(nextRandomEpisodeIndex);\r\n    } else if (hasNext) {\r\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\r\n    }\r\n  }\r\n\r\n  function playPrevious() {\r\n    if(hasPrevious) {\r\n    setCurrentEpisodeIndex(currentEpisodeIndex - 1);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <PlayerContext.Provider\r\n     value={{ \r\n       episodeList, \r\n       currentEpisodeIndex, \r\n       play,\r\n       playList, \r\n       isPlaying,\r\n       isLooping,\r\n       isShuffling,\r\n       playNext,\r\n       playPrevious,\r\n       togglePlay, \r\n       setPlayingState ,\r\n       hasNext,\r\n       hasPrevious,\r\n       toggleLoop,\r\n       toggleShuffle,\r\n       clearPlayerState,\r\n       }}\r\n       >\r\n        {children}\r\n    </PlayerContext.Provider>\r\n  )\r\n}\r\n\r\nexport const usePlayer = () => {\r\n  return useContext(PlayerContext);\r\n}"]},"metadata":{},"sourceType":"module"}